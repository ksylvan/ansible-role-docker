---
# based on https://docs.docker.com/engine/installation/linux/fedora/

# Set up the external docker repository
#
- name: Base URL for testing repo
  set_fact: docker_repo_base_url=https://yum.dockerproject.org/repo/testing
  when: docker_testing

- name: Base URL for main repo
  set_fact: docker_repo_base_url=https://yum.dockerproject.org/repo/main
  when: not docker_testing

- name: Look in dockerproject main repos
  uri: url={{docker_repo_base_url}}/fedora/ return_content=yes
  register: fedora_repo

- name: Look for the exact version
  command: echo {{ansible_distribution_version}}
  when: ('>' + ansible_distribution_version + '/<') in fedora_repo.content
  register: docker_exact_version
  changed_when: false

- name: Compose the docker repo URL
  shell: |
    if [ "{{docker_exact_version.skipped is not undefined}}" = "True" ]; then
      echo "ERROR: No repo for release {{ansible_distribution_version}}"
      exit 1
    else
      v="{{ansible_distribution_version}}"
    fi
    echo {{docker_repo_base_url}}/fedora/${v}/
  changed_when: false
  register: docker_repo_url

- name: Add dockerproject repository
  yum_repository:
    name: docker
    description: Docker Repository
    baseurl: "{{docker_repo_url.stdout}}"
    enabled: 1
    gpgcheck: 1
    gpgkey: https://yum.dockerproject.org/gpg

# Fix up SELinux if necessary (uses docker_selinux variable)
#
- name: SElinux running policy
  shell: "sestatus | grep Loaded | awk -F: '{print $2}'"
  changed_when: false
  register: selinux_running_policy

- name: SELinux running mode
  shell: "sestatus | grep mode | awk -F: '{print $2}'"
  changed_when: false
  register: selinux_running_mode

- name: Set up SELinux for Docker
  selinux: policy={{selinux_running_policy.stdout|trim}} state={{docker_selinux}}
  changed_when: selinux_running_mode.stdout|trim() != docker_selinux

# Set up the docker group (and add SUDO_USER to it)
#
- name: Ensure docker group exists
  group: name=docker system=yes state=present

- name: Check groups of user {{ansible_env.SUDO_USER}}
  command: groups {{ansible_env.SUDO_USER}}
  register: docker_user_groups
  changed_when: false

- name: Add user {{ansible_env.SUDO_USER}} to group docker
  user: name={{ansible_env.SUDO_USER}} append=yes groups=docker
  when: not ('docker' in docker_user_groups.stdout)

# Install docker and enable it
#
- name: Install docker engine
  dnf: name=docker-engine state=latest

- name: Enable docker daemon
  service: name=docker enabled=yes state=started
